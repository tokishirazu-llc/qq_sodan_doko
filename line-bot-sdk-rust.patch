diff --git a/Cargo.toml b/Cargo.toml
index ca20dd8..4fd8aea 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -21,13 +21,15 @@ actix-web = { version = "3", optional = true, default-features = false }
 base64 = "0.9.2"
 bytes = "0.4"
 chrono = "0.4"
-hmac = "0.6.2"
-reqwest = { version = "0.11.0", features = ["blocking", "json"] }
+# hmac = { version = "0.6.2", git = "https://github.com/RustCrypto/MACs.git" }
+hmac = "0.11.0"
+reqwest = { version = "0.11.0", features = ["json"] }
+futures = "0.3"
 rocket = { version = "0.4", optional = true }
 serde = { version = "1.0", features = ["derive"] }
 serde_derive = "1.0.97"
 serde_json = "1.0"
-sha2 = "0.7.1"
+sha2 = "0.9.8"
 
 [dev-dependencies]
 dotenv = "0.15.0"
diff --git a/src/bot.rs b/src/bot.rs
index 8e317b1..87e71fd 100644
--- a/src/bot.rs
+++ b/src/bot.rs
@@ -18,8 +18,9 @@ use crate::webhook;
 
 use std::collections::HashMap;
 
+use futures::executor::block_on;
 use chrono::NaiveDate;
-use reqwest::blocking::Response;
+use reqwest::Response;
 use reqwest::Error;
 use serde_derive::Serialize;
 use serde_json::{json, Error as JsonError, Value};
@@ -763,7 +764,7 @@ impl LineBot {
         // GET request
         if let Ok(res) = result {
             // Get response text
-            match res.text() {
+            match block_on(res.text()) {
                 Ok(text) => {
                     let result: Result<Profile, JsonError> = serde_json::from_str(&text);
                     match result {
diff --git a/src/client.rs b/src/client.rs
index 02ebe51..db7ac2d 100644
--- a/src/client.rs
+++ b/src/client.rs
@@ -1,6 +1,7 @@
 //! HTTP Client
 
-use reqwest::blocking::{Client, Response};
+use futures::executor::block_on;
+use reqwest::{Client, Response};
 use reqwest::header::{HeaderMap, HeaderValue, AUTHORIZATION, CONTENT_TYPE};
 use reqwest::Error;
 use reqwest::Url;
@@ -51,12 +52,12 @@ impl HttpClient {
         data: Value,
     ) -> Result<Response, Error> {
         let uri = Url::parse(&format!("{}{}", self.endpoint_base, endpoint)).unwrap();
-        self.client
+        block_on(self.client
             .get(uri)
             .query(&query)
             .headers(self.headers.clone())
             .json(&data)
-            .send()
+            .send())
     }
 
     /// # Note
@@ -71,12 +72,12 @@ impl HttpClient {
         data: Value,
     ) -> Result<Response, Error> {
         let uri = Url::parse(&format!("{}{}", self.endpoint_base_data, endpoint)).unwrap();
-        self.client
+        block_on(self.client
             .get(uri)
             .query(&query)
             .headers(self.headers.clone())
             .json(&data)
-            .send()
+            .send())
     }
 
     /// # Note
@@ -86,11 +87,11 @@ impl HttpClient {
     /// ```
     pub fn post(&self, endpoint: &str, data: Value) -> Result<Response, Error> {
         let uri = Url::parse(&format!("{}{}", self.endpoint_base, endpoint)).unwrap();
-        self.client
+        block_on(self.client
             .post(uri)
             .headers(self.headers.clone())
             .json(&data)
-            .send()
+            .send())
     }
 
     /// # Note
@@ -100,11 +101,11 @@ impl HttpClient {
     /// ```
     pub fn put(&self, endpoint: &str, data: Value) -> Result<Response, Error> {
         let uri = Url::parse(&format!("{}{}", self.endpoint_base, endpoint)).unwrap();
-        self.client
+        block_on(self.client
             .put(uri)
             .headers(self.headers.clone())
             .json(&data)
-            .send()
+            .send())
     }
 
     /// # Note
@@ -114,10 +115,10 @@ impl HttpClient {
     /// ```
     pub fn delete(&self, endpoint: &str, data: Value) -> Result<Response, Error> {
         let uri = Url::parse(&format!("{}{}", self.endpoint_base, endpoint)).unwrap();
-        self.client
+        block_on(self.client
             .delete(uri)
             .headers(self.headers.clone())
             .json(&data)
-            .send()
+            .send())
     }
 }
diff --git a/src/events/messages/location_message.rs b/src/events/messages/location_message.rs
index 5a15ad5..ea3fbae 100644
--- a/src/events/messages/location_message.rs
+++ b/src/events/messages/location_message.rs
@@ -3,7 +3,6 @@ use serde_derive::Deserialize;
 #[derive(Deserialize, Debug)]
 pub struct LocationMessage {
     pub id: String,
-    pub title: String,
     pub address: String,
     pub latitude: f32,
     pub longitude: f32,
diff --git a/src/webhook.rs b/src/webhook.rs
index 3e4dfec..daf5f34 100644
--- a/src/webhook.rs
+++ b/src/webhook.rs
@@ -1,7 +1,7 @@
 //! Functions for webhook
 
 use base64::encode;
-use hmac::{Hmac, Mac};
+use hmac::{Hmac, Mac, NewMac};
 use sha2::Sha256;
 
 /// Signature validator
@@ -19,7 +19,9 @@ pub fn validate_signature(channel_secret: &str, signature: &str, body: &str) ->
     type HmacSha256 = Hmac<Sha256>;
 
     let mut mac =
-        HmacSha256::new_varkey(channel_secret.as_bytes()).expect("HMAC can take key of any size");
-    mac.input(body.as_bytes());
-    encode(&mac.result().code().to_vec()) == signature
+        // HmacSha256::new_varkey(channel_secret.as_bytes()).expect("HMAC can take key of any size");
+        HmacSha256::new_from_slice(channel_secret.as_bytes()).expect("HMAC can take key of any size");
+    // mac.input(body.as_bytes());
+    mac.update(body.as_bytes());
+    encode(&mac.finalize().into_bytes().to_vec()) == signature
 }
